//  Create an abstract class 'Bank' with an abstract method 'getBalance'. 
// Rs.100, Rs.150 and Rs.200 are deposited in banks A, B and C respectively. 
// 'BankA', 'BankB' and 'BankC' 
// are subclasses of class 'Bank', each having a method named 'getBalance'. Call 
// this method by creating an object of each of the three classes.
abstract class Bank {
    public abstract void getBalance();
}

class BankA extends Bank {
    int bal = 100;

    @Override
    public void getBalance() {
        System.out.println("Balance of BankA is " + bal);
    }
}

class BankB extends Bank {
    int bal = 150;

    @Override
    public void getBalance() {
        System.out.println("Balance of BankB is " + bal);
    }
}

class BankC extends Bank {
    int bal = 200;

    @Override
    public void getBalance() {
        System.out.println("Balance of BankC is " + bal);
    }
}

public class Main {
    public static void main(String[] args) {
        BankA a = new BankA();
        BankB b = new BankB();
        BankC c = new BankC();

        a.getBalance();
        b.getBalance();
        c.getBalance();
    }
}

//javac Main.java
//java Main



// : Program that displays three concentric circles where ever the user clicks the 
// mouse on a frame. 
// The program must exit when user clicks ‘X’ on the frame.
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

class Ovals extends JPanel {
    private int clickX = -1, clickY = -1; // To store the click position

    public Ovals() {
        addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {
                clickX = me.getX();
                clickY = me.getY();
                repaint(); // Request a repaint to draw the circles
            }
        });
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); // Call the superclass method
        if (clickX != -1 && clickY != -1) {
            drawConcentricCircles(g, clickX, clickY);
        }
    }

    private void drawConcentricCircles(Graphics g, int x, int y) {
        int r1 = (int) (0.4 * Math.min(getWidth(), getHeight()));
        g.setColor(Color.RED);
        g.fillOval(x - r1, y - r1, 2 * r1, 2 * r1);

        int r2 = (int) (0.3 * Math.min(getWidth(), getHeight()));
        g.setColor(Color.BLUE);
        g.fillOval(x - r2, y - r2, 2 * r2, 2 * r2);

        int r3 = (int) (0.2 * Math.min(getWidth(), getHeight()));
        g.setColor(Color.YELLOW);
        g.fillOval(x - r3, y - r3, 2 * r3, 2 * r3);
    }

    public static void main(String[] args) {
        JFrame newFrame = new JFrame("Concentric Circles");
        Ovals ovalsPanel = new Ovals();
        newFrame.add(ovalsPanel);
        newFrame.setSize(550, 550);
        newFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        newFrame.setVisible(true);
    }
}
